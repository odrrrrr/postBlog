p.610

Koa 애플리케이션은 미들웨어의 배열로 구성
app.use 는 미들웨어 함수를 애플리케이션에 등록

 * 미들웨어 함수는 (ctx, next)=>{ } 구조 * koa 에서는 이 형식으로 계속 사용 장점: 어디서든 미들웨어 생성가능
ctx 는 웹요청과 응답에 관한 정보
next 는 현재 처리중인 미들웨어의 다음 미들웨어 호출하는 함수
미들웨어는 등록되는 순서대로 처리

mongoose
- Schema
find같은 구문 매개변수 줄때는 json형식으로?
const { id } = ctx.params;
const post = await Post.findById(id);

p.613
next 함수 호출하면 Promise 반환
next().then() 형식으로 Promise가 끝난 후 할 동작 설정 가능

p.615
async / await
지금 처리하고 있는 미들웨어에  async / await 설정해주어서
미들웨어끼리 왔다갔다하며 수행가능

p.616
nodemon 사용하여 백엔드 서버 코드 수정 시 바로바로 적용되도록 ( 서버자동시작 )
npm install --dev nodemon
package.json scripts 에 "start":"nodemon --watch src/ src/index.js" 입력

p.622
route 의 모듈화
한 파일에 경로를 모아놓고 그 파일을 불러와 적용

p.667
ObjectId검증 ( 미들웨어 형식 )
현재 받아오는 /:id 값이 mongoose id type이 맞는지 확인해서 올바른 throw 로 가도록
next() 사용

p.668
미들웨어는 스프링의 filter처럼 next()로 사용

p.669
Joi 라이브러리 이용해서 요청 내용 검증 (ex)) title, body , tags 값을 잘 전달받았는지)

p.676
포스트 역순( sort({모델이름: -1 or 1 }) )
불러올 포스터 갯수 limit(숫자)
페이지 생성 skip((page-1)*10)

p.684
세션기반인증 => 사용자 -> 서버 -> 세션저장소 -> 서버 -> 사용자 // 세션저장소에 정보가 계속 저장되고 공유되므로 신경쓸것이많음
토큰기반인증 => 사용자 -> 서버 (서명있는 토큰발급) -> 사용자 // 로그인 정보를 기억하기위해 사용하는 리소스가 적다 ( 사용자쪽에서 로그인 상태를 지닌 토큰 가지고있으므로)

p.686
비밀번호 데이터에 저장할때 가공되지 않은 텍스트로 저장하면 보안위험
단방향 해싱함수 지원하는 bcrypt 라이브러리 사용하기


